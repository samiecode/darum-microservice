name: CI - Pull Request

on:
    pull_request:
        branches:
            - main
            - develop
        paths-ignore:
            - "**.md"
            - ".gitignore"
            - "LICENSE"

jobs:
    build-and-test:
        name: Build and Test All Services
        runs-on: ubuntu-latest

        strategy:
            matrix:
                java-version: [21]
                service:
                    - discovery-service
                    - config-server
                    - api-gateway
                    - auth-service
                    - employee-service
                    - shared-domain

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up JDK ${{ matrix.java-version }}
              uses: actions/setup-java@v4
              with:
                  java-version: ${{ matrix.java-version }}
                  distribution: "temurin"
                  cache: "maven"

            - name: Cache Maven packages
              uses: actions/cache@v4
              with:
                  path: ~/.m2/repository
                  key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
                  restore-keys: |
                      ${{ runner.os }}-maven-

            - name: Build shared-domain first
              if: matrix.service != 'shared-domain'
              run: |
                  cd shared-domain
                  mvn clean install -DskipTests

            - name: Build ${{ matrix.service }}
              run: |
                  cd ${{ matrix.service }}
                  mvn clean compile

            - name: Run unit tests for ${{ matrix.service }}
              run: |
                  cd ${{ matrix.service }}
                  mvn test
              continue-on-error: false

            - name: Run integration tests for ${{ matrix.service }}
              if: matrix.service == 'auth-service' || matrix.service == 'employee-service'
              run: |
                  cd ${{ matrix.service }}
                  mvn verify -Pintegration-tests
              continue-on-error: false

            - name: Generate test coverage report
              if: matrix.service == 'auth-service' || matrix.service == 'employee-service'
              run: |
                  cd ${{ matrix.service }}
                  mvn jacoco:report

            - name: Upload test coverage to Codecov
              if: matrix.service == 'auth-service' || matrix.service == 'employee-service'
              uses: codecov/codecov-action@v4
              with:
                  files: ./${{ matrix.service }}/target/site/jacoco/jacoco.xml
                  flags: ${{ matrix.service }}
                  name: ${{ matrix.service }}-coverage
                  fail_ci_if_error: false

            - name: Upload test results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: test-results-${{ matrix.service }}
                  path: ${{ matrix.service }}/target/surefire-reports/
                  retention-days: 7

            - name: Publish test report
              if: always()
              uses: dorny/test-reporter@v1
              with:
                  name: Test Report - ${{ matrix.service }}
                  path: ${{ matrix.service }}/target/surefire-reports/*.xml
                  reporter: java-junit
                  fail-on-error: false

    code-quality:
        name: Code Quality Analysis
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up JDK 21
              uses: actions/setup-java@v4
              with:
                  java-version: "21"
                  distribution: "temurin"
                  cache: "maven"

            - name: Run Maven Checkstyle
              run: mvn checkstyle:check
              continue-on-error: true

            - name: Run SpotBugs
              run: mvn compile spotbugs:check
              continue-on-error: true

            - name: SonarCloud Scan
              if: github.event.pull_request.head.repo.full_name == github.repository
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: |
                  mvn clean verify sonar:sonar \
                    -Dsonar.projectKey=darum-microservice \
                    -Dsonar.organization=your-org \
                    -Dsonar.host.url=https://sonarcloud.io
              continue-on-error: true

    security-scan:
        name: Security Vulnerability Scan
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up JDK 21
              uses: actions/setup-java@v4
              with:
                  java-version: "21"
                  distribution: "temurin"
                  cache: "maven"

            - name: Run OWASP Dependency Check
              run: |
                  mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7
              continue-on-error: true

            - name: Upload OWASP report
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: owasp-dependency-check-report
                  path: target/dependency-check-report.html
                  retention-days: 7

    pr-summary:
        name: PR Summary
        runs-on: ubuntu-latest
        needs: [build-and-test, code-quality, security-scan]
        if: always()

        steps:
            - name: Post PR Comment
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const buildStatus = '${{ needs.build-and-test.result }}';
                      const qualityStatus = '${{ needs.code-quality.result }}';
                      const securityStatus = '${{ needs.security-scan.result }}';

                      const emoji = (status) => {
                        if (status === 'success') return '✅';
                        if (status === 'failure') return '❌';
                        return '⚠️';
                      };

                      const comment = `
                      ## 🚀 CI Pipeline Results

                      | Check | Status |
                      |-------|--------|
                      | Build & Test | ${emoji(buildStatus)} ${buildStatus} |
                      | Code Quality | ${emoji(qualityStatus)} ${qualityStatus} |
                      | Security Scan | ${emoji(securityStatus)} ${securityStatus} |

                      ### 📊 Test Coverage
                      View detailed coverage reports in the Codecov tab.

                      ### 🔍 Next Steps
                      ${buildStatus === 'success' ? '- ✅ All checks passed! Ready for review.' : '- ❌ Please fix failing tests before merging.'}
                      `;

                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: comment
                      });
