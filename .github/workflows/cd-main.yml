name: CD - Deploy to Production

on:
    push:
        branches:
            - main
        paths-ignore:
            - "**.md"
            - ".gitignore"
            - "LICENSE"
    workflow_dispatch:
        inputs:
            environment:
                description: "Deployment environment"
                required: true
                default: "staging"
                type: choice
                options:
                    - staging
                    - production

env:
    REGISTRY: ghcr.io
    IMAGE_TAG: ${{ github.sha }}

jobs:
    build-and-push:
        name: Build and Push Docker Images
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write

        strategy:
            matrix:
                service:
                    - discovery-service
                    - config-server
                    - api-gateway
                    - auth-service
                    - employee-service

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up JDK 21
              uses: actions/setup-java@v4
              with:
                  java-version: "21"
                  distribution: "temurin"
                  cache: "maven"

            - name: Build shared-domain
              run: |
                  cd shared-domain
                  mvn clean install -DskipTests

            - name: Build ${{ matrix.service }}
              run: |
                  cd ${{ matrix.service }}
                  mvn clean package -DskipTests

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}
                  tags: |
                      type=sha,prefix={{branch}}-
                      type=ref,event=branch
                      type=semver,pattern={{version}}
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: ./${{ matrix.service }}
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  platforms: linux/amd64,linux/arm64

    deploy-staging:
        name: Deploy to Staging
        runs-on: ubuntu-latest
        needs: build-and-push
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
        environment:
            name: staging
            url: https://staging.darum.com

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Configure kubectl
              uses: azure/setup-kubectl@v3

            - name: Set Kubernetes context
              uses: azure/k8s-set-context@v3
              with:
                  method: kubeconfig
                  kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

            - name: Deploy to Kubernetes
              run: |
                  kubectl set image deployment/discovery-service discovery-service=${{ env.REGISTRY }}/${{ github.repository_owner }}/discovery-service:${{ env.IMAGE_TAG }} -n staging
                  kubectl set image deployment/config-server config-server=${{ env.REGISTRY }}/${{ github.repository_owner }}/config-server:${{ env.IMAGE_TAG }} -n staging
                  kubectl set image deployment/api-gateway api-gateway=${{ env.REGISTRY }}/${{ github.repository_owner }}/api-gateway:${{ env.IMAGE_TAG }} -n staging
                  kubectl set image deployment/auth-service auth-service=${{ env.REGISTRY }}/${{ github.repository_owner }}/auth-service:${{ env.IMAGE_TAG }} -n staging
                  kubectl set image deployment/employee-service employee-service=${{ env.REGISTRY }}/${{ github.repository_owner }}/employee-service:${{ env.IMAGE_TAG }} -n staging

            - name: Wait for deployments to be ready
              run: |
                  kubectl rollout status deployment/discovery-service -n staging --timeout=300s
                  kubectl rollout status deployment/config-server -n staging --timeout=300s
                  kubectl rollout status deployment/api-gateway -n staging --timeout=300s
                  kubectl rollout status deployment/auth-service -n staging --timeout=300s
                  kubectl rollout status deployment/employee-service -n staging --timeout=300s

            - name: Run smoke tests
              run: |
                  chmod +x ./scripts/smoke-tests.sh
                  ./scripts/smoke-tests.sh staging

    deploy-production:
        name: Deploy to Production
        runs-on: ubuntu-latest
        needs: deploy-staging
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
        environment:
            name: production
            url: https://darum.com

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Configure kubectl
              uses: azure/setup-kubectl@v3

            - name: Set Kubernetes context
              uses: azure/k8s-set-context@v3
              with:
                  method: kubeconfig
                  kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

            - name: Deploy to Kubernetes (Blue-Green)
              run: |
                  # Deploy to green environment
                  kubectl set image deployment/discovery-service-green discovery-service=${{ env.REGISTRY }}/${{ github.repository_owner }}/discovery-service:${{ env.IMAGE_TAG }} -n production
                  kubectl set image deployment/config-server-green config-server=${{ env.REGISTRY }}/${{ github.repository_owner }}/config-server:${{ env.IMAGE_TAG }} -n production
                  kubectl set image deployment/api-gateway-green api-gateway=${{ env.REGISTRY }}/${{ github.repository_owner }}/api-gateway:${{ env.IMAGE_TAG }} -n production
                  kubectl set image deployment/auth-service-green auth-service=${{ env.REGISTRY }}/${{ github.repository_owner }}/auth-service:${{ env.IMAGE_TAG }} -n production
                  kubectl set image deployment/employee-service-green employee-service=${{ env.REGISTRY }}/${{ github.repository_owner }}/employee-service:${{ env.IMAGE_TAG }} -n production

            - name: Wait for green deployments
              run: |
                  kubectl rollout status deployment/discovery-service-green -n production --timeout=300s
                  kubectl rollout status deployment/config-server-green -n production --timeout=300s
                  kubectl rollout status deployment/api-gateway-green -n production --timeout=300s
                  kubectl rollout status deployment/auth-service-green -n production --timeout=300s
                  kubectl rollout status deployment/employee-service-green -n production --timeout=300s

            - name: Run health checks on green
              run: |
                  chmod +x ./scripts/health-check.sh
                  ./scripts/health-check.sh production green

            - name: Switch traffic to green (Blue-Green swap)
              run: |
                  kubectl patch service discovery-service -n production -p '{"spec":{"selector":{"version":"green"}}}'
                  kubectl patch service config-server -n production -p '{"spec":{"selector":{"version":"green"}}}'
                  kubectl patch service api-gateway -n production -p '{"spec":{"selector":{"version":"green"}}}'
                  kubectl patch service auth-service -n production -p '{"spec":{"selector":{"version":"green"}}}'
                  kubectl patch service employee-service -n production -p '{"spec":{"selector":{"version":"green"}}}'

            - name: Monitor new deployment
              run: |
                  sleep 60
                  ./scripts/health-check.sh production green

            - name: Rollback on failure
              if: failure()
              run: |
                  kubectl patch service discovery-service -n production -p '{"spec":{"selector":{"version":"blue"}}}'
                  kubectl patch service config-server -n production -p '{"spec":{"selector":{"version":"blue"}}}'
                  kubectl patch service api-gateway -n production -p '{"spec":{"selector":{"version":"blue"}}}'
                  kubectl patch service auth-service -n production -p '{"spec":{"selector":{"version":"blue"}}}'
                  kubectl patch service employee-service -n production -p '{"spec":{"selector":{"version":"blue"}}}'

    notify:
        name: Send Notifications
        runs-on: ubuntu-latest
        needs: [deploy-staging, deploy-production]
        if: always()

        steps:
            - name: Send Slack notification
              uses: 8398a7/action-slack@v3
              with:
                  status: ${{ job.status }}
                  text: |
                      Deployment Status: ${{ job.status }}
                      Environment: ${{ github.event.inputs.environment || 'staging' }}
                      Commit: ${{ github.sha }}
                      Author: ${{ github.actor }}
                  webhook_url: ${{ secrets.SLACK_WEBHOOK }}
              if: always()

            - name: Send email notification
              uses: dawidd6/action-send-mail@v3
              with:
                  server_address: smtp.gmail.com
                  server_port: 587
                  username: ${{ secrets.EMAIL_USERNAME }}
                  password: ${{ secrets.EMAIL_PASSWORD }}
                  subject: "Deployment ${{ job.status }} - Darum Microservices"
                  body: |
                      Deployment Status: ${{ job.status }}
                      Environment: ${{ github.event.inputs.environment || 'staging' }}
                      Commit: ${{ github.sha }}
                      Author: ${{ github.actor }}

                      View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                  to: devops@darum.com
                  from: GitHub Actions
              if: always()
